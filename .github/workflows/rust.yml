name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  CMDNAME: createurl
jobs:
  build:
    name: Rust
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
            archive-name: ${{vars.LINUX_ARCHIVE}}
          - build: windows
            os: windows-latest
            rust: nightly-x86_64-msvc
            target: x86_64-pc-windows-msvc
            archive-name: ${{vars.WINDOWS_ARCHIVE}}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build binary
        # run: cd createurl && cargo build --verbose --release --target ${{ matrix.target }}
        run: cd createurl && cargo build --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      # - name: Strip binary (linux and macos)
      #   if: matrix.build == 'linux' || matrix.build == 'macos'
      #   run: strip "createurl/target/${{ matrix.target }}/release/${{env.CMDNAME}}"

      - name: Build archive
        shell: bash
        run: |
          cd createurl
          mkdir archive
          # cp LICENSE README.md archive/
          cd archive
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/${{ matrix.target }}/release/${{env.CMDNAME}}.exe" ./
            tree
            7z a "${{ matrix.archive-name }}" ${{env.CMDNAME}}.exe
          else
            echo "当前路径: $(pwd)"
            cp "../target/${{ matrix.target }}/release/${{env.CMDNAME}}" ./
            tar -czf "${{ matrix.archive-name }}" ${{env.CMDNAME}}
          fi
      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive-name }}
          path: createurl/archive/${{ matrix.archive-name }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      # - name: Generate Changelog
      #   run: echo "# Good things have arrived" > ${{ github.workspace }}-CHANGELOG.txt
      - name: where
        run: echo "当前路径:$(pwd)" && tree
      # - name: Release
      #   uses: softprops/action-gh-release@v2
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     body_path: ${{ github.workspace }}-CHANGELOG.txt
      #     repository: my_gh_org/my_gh_repo
      #     # note you'll typically need to create a personal access token
      #     # with permissions to create releases in the other repo
      #     # token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
      #     files: |
      #       Release.txt
      #       LICENSE
